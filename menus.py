from telebot import types
import pickle
import os


class Users:
    activeUsers = {}

    def __init__(self, chat_id, user_json):
        self.id = user_json["id"]
        self.isBot = user_json["is_bot"]
        self.firstName = user_json["first_name"]
        self.userName = user_json["username"]
        self.languageCode = user_json.get("language_code", "")

        self.__class__.activeUsers[chat_id] = self

    def __str__(self):
        return f"Name user: {self.firstName}   id: {self.userName}   lang: {self.languageCode}"

    def getUserHTML(self):
        return f"Name user: {self.firstName}   id: <a href='https://t.me/{self.userName}'>{self.userName}</a>   lang: {self.languageCode}"


    @classmethod
    def getUser(cls, chat_id):
        return cls.activeUsers.get(chat_id)


class Menu:
    hash = {}  # —Ç—É—Ç –±—É–¥–µ–º –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞
    cur_menu = {}  # —Ç—É—Ç –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞, —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    extendedParameters = {}  # —ç—Ç–æ –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ inline –∫–Ω–æ–ø–∫–∏
    namePickleFile = "bot_curMenu.plk"

    def __init__(self, name, buttons=None, parent=None, module=""):
        self.parent = parent
        self.module = module
        self.name = name
        self.buttons = buttons

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
        markup.add(*buttons)
        self.markup = markup

        self.__class__.hash[name] = self  # –≤ –∫–ª–∞—Å—Å–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å, —Å–æ –≤—Å–µ–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –∫–ª–∞—Å—Å–∞, –æ–±–Ω–æ–≤–∏–º –µ–≥–æ

    @classmethod
    def getExtPar(cls, id):
        return cls.extendedParameters.get(id, None)

    @classmethod
    def setExtPar(cls, parameter):
        import uuid
        id = uuid.uuid4().hex
        cls.extendedParameters[id] = parameter
        return id

    @classmethod
    def getMenu(cls, chat_id, name):
        menu = cls.hash.get(name)
        if menu != None:
            cls.cur_menu[chat_id] = menu
            cls.saveCurMenu()
        return menu

    @classmethod
    def getCurMenu(cls, chat_id):
        return cls.cur_menu.get(chat_id)

    @classmethod
    def loadCurMenu(self):
        if os.path.exists(self.namePickleFile):
            with open(self.namePickleFile, 'rb') as pickle_in:
                self.cur_menu = pickle.load(pickle_in)
        else:
            self.cur_menu = {}

    @classmethod
    def saveCurMenu(self):
        with open(self.namePickleFile, 'wb') as pickle_out:
            pickle.dump(self.cur_menu, pickle_out)


def goto_menu(tg, chat_id, name_menu):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
    cur_menu = Menu.getCurMenu(chat_id)
    if name_menu == "–í—ã—Ö–æ–¥" and cur_menu != None and cur_menu.parent != None:
        target_menu = Menu.getMenu(chat_id, cur_menu.parent.name)
    else:
        target_menu = Menu.getMenu(chat_id, name_menu)

    if target_menu != None:
        tg.send_message(chat_id, text=target_menu.name, reply_markup=target_menu.markup)
        return target_menu
    else:
        return None
    
categories_list = ["–ñ–∏–≤–æ—Ç–Ω—ã–µ", "–ï–¥–∞", "–î–æ–º", "–û–¥–µ–∂–¥–∞", "–®–∫–æ–ª–∞", "–ú—É–∑—ã–∫–∞", "–¢–µ–ª–æ", "–°–ø–æ—Ä—Ç", "–ö–æ–º–ø—å—é—Ç–µ—Ä", "–ü—Ä–∏—Ä–æ–¥–∞", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏"]
ABC = '–ê –ë –í –ì –î –ï –ñ –ó –ò –ô –ö –õ –ú –ù –û –ü –† –° –¢ –£ –§ –• –¶ –ß –® –© –™ –´ –¨ –≠ –Æ –Ø üö´Ô∏è'.split()
letters = list(ABC)

categories_list_turp = tuple(categories_list)
dictionary = tuple(letters)

m_main = Menu("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", buttons=["–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è","–ê–Ω–∏–º–µ",'–ò–≥—Ä—ã','Wiki','–ü–æ–º–æ—â—å'])

m_games = Menu("–ò–≥—Ä—ã", buttons=["–ö–æ—Å—Ç–∏","–í–∏—Å–∏–ª–∏—Ü–∞",'–í—ã—Ö–æ–¥'], parent=m_main, module="Games")
m_game_dc = Menu("–ö–æ—Å—Ç–∏", buttons=["–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏",'–í—ã—Ö–æ–¥'], parent=m_games, module="Games")

m_hangman = Menu("–í–∏—Å–∏–ª–∏—Ü–∞", buttons=['–ò–≥—Ä–∞—Ç—å', '–í—ã—Ö–æ–¥'], parent=m_main, module="Hangman")
m_hangman_theme = Menu("–ò–≥—Ä–∞—Ç—å", buttons=categories_list, parent=m_hangman, module="Hangman")
# –¢—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¶–∏—Ä–∫ —Å Menu
m_hangman_start = Menu(categories_list_turp, buttons="–í—ã–±—Ä–∞—Ç—å –±—É–∫–≤—É", parent=m_hangman_theme, module="Hangman")
m_hangman_abc = Menu("–í—ã–±—Ä–∞—Ç—å –±—É–∫–≤—É", buttons=letters, parent=m_hangman_start, module="Hangman")
m_hangman_abc2 = Menu(dictionary, buttons=letters, parent=m_hangman_start, module="Hangman")

m_fun = Menu("–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", buttons=["–°–æ–±–∞–∫–∞",'–õ–∏—Å–∞','–ö–Ω–∏–≥–∞','–ü–æ–≥–æ–¥–∞','–í—ã—Ö–æ–¥'], parent=m_main, module="fun")
m_anime = Menu("–ê–Ω–∏–º–µ", buttons=['–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ', '–ü–æ–∏—Å–∫ –º–∞–Ω–≥–∏', 'Pat','Nep','–í—ã—Ö–æ–¥'], parent=m_main, module="Anime")
m_wiki = Menu("Wiki", buttons=['–ü–æ–∏—Å–∫ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞', '–í—ã—Ö–æ–¥'], parent=m_main, module="Wikis")
Menu.loadCurMenu()
